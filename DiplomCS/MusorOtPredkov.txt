using System.ComponentModel;
using System.Text;
using System.Threading.Tasks;

                //colr = picture.GetPixel(a, b);
                //if (colr.Name == "ffffffff")  // белый
                //{
                //    massiv[a, b] = 0;
                //}

                /*StringBuilder bld = new StringBuilder();
                foreach (string str in paths_list.OrderBy(c => c)) // упорядочивание файлов по алфавиту и счёту
                {
                    bld.Append(str);
                    bld.Append(Environment.NewLine);
                }*/

                //paths_list.Clear();
                //names_list.Clear();

                //comboBox1.Items.Add(str);
            //get_ndvi_range();
			        
        /*private void enable_ndvi_elements()
        {
            comboBox1.Visible = false;
            comboBox1.Enabled = false;
            label2.Visible = false;
            comboBox2.Visible = false;
            comboBox2.Enabled = false;

            Save_as.Enabled = false;
            Save_picture.Enabled = false;

            label1.Visible = true;
            label1.Text = "Название файла: " + file_name;
            label1.Location = new Point(ClientSize.Width - 179, 25);
            
            label4.Visible = true;
            label4.Location = new Point(ClientSize.Width - 179, label1.Location.Y + 18);

            numUp.Visible = true;
            numUp.Enabled = true;
            numUp.Location = new Point(ClientSize.Width - 179, label4.Location.Y + 18);

            label5.Visible = true;
            label5.Location = new Point(ClientSize.Width - 179, numUp.Location.Y + 25);

            numDown.Visible = true;
            numDown.Enabled = true;
            numDown.Location = new Point(ClientSize.Width - 179, label5.Location.Y + 18);

            label3.Visible = true;
            label3.Location = new Point(ClientSize.Width - 179, numDown.Location.Y + 25);

            button1.Visible = true;
            button1.Enabled = true;
            button1.Location = new Point(ClientSize.Width - button1.Width - 8, label3.Location.Y + 18);
        }

        private void enable_rgb_elements()
        {
            comboBox1.Visible = false;
            comboBox1.Enabled = false;
            //label3.Visible = false;

            Save_as.Enabled = true;
            Save_picture.Enabled = true;

            label1.Visible = true;
            label1.Text = "Название файла: " + file_name;
            label1.Location = new Point(ClientSize.Width - 179, 25);

            label2.Visible = true;
            label2.Location = new Point(ClientSize.Width - 179, label1.Location.Y + 18);

            comboBox2.Visible = true;
            comboBox2.Enabled = true;
            comboBox2.Location = new Point(ClientSize.Width - 179, label2.Location.Y + 18);
            comboBox2.DropDownStyle = ComboBoxStyle.DropDownList;
        }
        
        private void button_change_elements()
        {
            label2.Visible = true;
            if (comboBox1.Enabled)
                label2.Location = new Point(ClientSize.Width - 129, comboBox1.Location.Y + 26);
            else
                label2.Location = new Point(ClientSize.Width - 179, label1.Location.Y + 18);

            comboBox2.Visible = true;
            comboBox2.Enabled = true;
            if (comboBox1.Enabled)
                comboBox2.Location = new Point(ClientSize.Width - 129, label2.Location.Y + 18);
            else
                comboBox2.Location = new Point(ClientSize.Width - 179, label2.Location.Y + 18);
            comboBox2.DropDownStyle = ComboBoxStyle.DropDownList;

            label3.Visible = true;
            if (comboBox1.Enabled)
                label3.Location = new Point(ClientSize.Width - 129, comboBox2.Location.Y + 26); // 455, 113
            else
                label3.Location = new Point(ClientSize.Width - 179, comboBox2.Location.Y + 26);

            button1.Location = new Point(ClientSize.Width - button1.Width - 8, label3.Location.Y + 18);
        }*/

            //if (file_sorting[comboBox1.SelectedIndex])
            //{
                /*label4.Visible = true;
                label4.Location = new Point(ClientSize.Width - 129, comboBox1.Location.Y + 26);

                numUp.Visible = true;
                numUp.Enabled = true;
                numUp.Location = new Point(ClientSize.Width - 129, label4.Location.Y + 18);

                label5.Visible = true;
                label5.Location = new Point(ClientSize.Width - 129, numUp.Location.Y + 25);

                numDown.Visible = true;
                numDown.Enabled = true;
                numDown.Location = new Point(ClientSize.Width - 129, label5.Location.Y + 18);

                label3.Visible = true;
                label3.Location = new Point(ClientSize.Width - 129, numDown.Location.Y + 25); // 455, 113

                button1.Visible = true;
                button1.Enabled = true;
                button1.Location = new Point(ClientSize.Width - button1.Width - 8, label3.Location.Y + 18);*/
            /*}
            else
            {
                //label3.Visible = false;
                //button1.Visible = false;
                //button1.Enabled = false;
                
                label1.Location = new Point(ClientSize.Width - 129, 25);
                
                comboBox1.Location = new Point(ClientSize.Width - 129, label1.Location.Y + 18);

                label2.Visible = true;
                label2.Text = "Выберите местность:";
                label2.Location = new Point(ClientSize.Width - 129, comboBox1.Location.Y + 26);

                comboBox2.Visible = true;
                comboBox2.Enabled = true;
                comboBox2.Location = new Point(ClientSize.Width - 129, label2.Location.Y + 18);
                comboBox2.DropDownStyle = ComboBoxStyle.DropDownList;
            }*/

                //label3.Visible = false;
                //button1.Visible = false;
                //button1.Enabled = false;

        /*
        private void Open_ndvi_Click(object sender, EventArgs e)
        {
            get_file(false);

            if (file_path != "")
            {
                enable_ndvi_elements();

                pictureBox1.Image = new Bitmap(file_path);
                picturebox_resize();
            }
        }

        private void Open_rgb_Click(object sender, EventArgs e)
        {
            get_file(false);

            if (file_path != "")
            {
                enable_rgb_elements();
                
                pictureBox1.Image = new Bitmap(file_path);
                picturebox_resize();
            }
        }*/
        // написать
        /*private void Button1_Click(object sender, EventArgs e)
        {
            // Кнопка вызывается с 2 мест:
            // 1. поясни за ndvi из списка
            // 2. поясни за ndvi файл
            get_file(true);

            //pictureBox1.Image = new Bitmap(rgb_path);
            //picturebox_resize();

            button_change_elements();
        }*/


            //Array.Resize(ref input_layer, input_count);
            //Array.Resize(ref f_hidden_layer, hidden_count);
            //Array.Resize(ref output_layer, input_count);
            //Array.Resize(ref taken_pic, neurons_count);
            //Array.Resize(ref weights, neurons_count);
			//weights = (double[,])ResizeArray(weights, new int[] { hidden_count, input_count });
			
                //string rgb_name = ;
                //string ndvi_name = ;
                //Color pix_color = new Color();
                //Bitmap img = new Bitmap(paths_list[comboBox1.SelectedIndex]);
                
				

        /*private void fill_picture(int[,,] massive, int start_x, int start_y, int size)
        {
            for(int j = start_y; j < size + start_y; j++)
            {
                for (int i = start_x; i < size + start_x; i++)
                {
                    test.SetPixel(i, j, Color.FromArgb(255, l_pic[l, d, 0], l_pic[l, d, 1], l_pic[l, d, 2]));
                }
            }
        }*/



		//fixed (byte* _res = res)
                //{
                    //int start_pos = start_y * width + start_x;
                        //r_layer = 0,
                        //g_layer = width * height,
                        //b_layer = 2 * width * height;

                    //byte* curpos = (byte*)bd.Scan0 + start_y * bd.Stride; // (width * 3 + 1)
                        //_r = _res + r_layer,
                        //_g = _res + g_layer,
                        //_b = _res + b_layer; // + start_pos

                    for (int h = start_y, d = 0; h < end_y; h++, d++)
                    {
                        byte* curpos = (byte*)bd.Scan0 + h * bd.Stride;
                        for (int w = start_x, l = 0; w < end_x; w++, l++, curpos += 3)
                        {
                            curpos[start_x * 3 + 0] = (byte)arr[l, d, 2]; // *_b++
                            curpos[start_x * 3 + 1] = (byte)arr[l, d, 1]; // *_g++
                            curpos[start_x * 3 + 2] = (byte)arr[l, d, 0]; // *_r++
                        } // (width * 3 + 1)
                    }
                //}


				
        // доработать
        #region 1 способ (доработанные GetPixel и SetPixel)
        private int[,,] MGetPixel(Bitmap bmp, int start_x, int start_y)
        {
            DirectBitmap dbm = new DirectBitmap(bmp);
            int[,,] res = new int[rect_size, rect_size, 3];

            int l = 0, d = 0;
            for (int j = start_y; j < rect_size + start_y; j++)
            {
                for (int i = start_x; i < rect_size + start_x; i++)
                {
                    res[l, d, 0] = dbm.GetPixel(j, i).R;
                    res[l, d, 1] = dbm.GetPixel(j, i).G;
                    res[l, d, 2] = dbm.GetPixel(j, i).B;
                    l++;
                }
                l = 0;
                d++;
            }
            dbm.Dispose();

            return res;
        }

        private Bitmap MSetPixel(Bitmap bmp, int[,,] arr, int start_x, int start_y)
        {
            Color clr;
            DirectBitmap dbm = new DirectBitmap(bmp);

            int l = 0, d = 0;
            for (int j = start_y; j < rect_size + start_y; j++)
            {
                for (int i = start_x; i < rect_size + start_x; i++)
                {
                    clr = Color.FromArgb(255, arr[l, d, 0], arr[l, d, 1], arr[l, d, 2]);
                    dbm.SetPixel(j, i, clr);
                    l++;
                }
                l = 0;
                d++;
            }
            dbm.Dispose();

            return bmp;
        }
        #endregion 1 способ (доработанные GetPixel и SetPixel)

        #region 2 способ (указатели)
        /*unsafe {
            var oneBits = one.LockBits(new Rectangle(0, 0, one.Width, one.Height), ImageLockMode.ReadOnly, one.PixelFormat);
            var twoBits = two.LockBits(new Rectangle(0, 0, two.Width, two.Height), ImageLockMode.ReadOnly, two.PixelFormat);
            var thrBits = thr.LockBits(new Rectangle(0, 0, thr.Width, thr.Height), ImageLockMode.WriteOnly, thr.PixelFormat);

            int padding = twoBits.Stride - (two.Width * sizeof(Pixel));

            int width = two.Width;
            int height = two.Height;

            Parallel.For(0, one.Width * one.Height, i => {
                Pixel* pxOne = (Pixel*)((byte*)oneBits.Scan0 + i * sizeof(Pixel));

                byte* ptr = (byte*)twoBits.Scan0;

                for (int j = 0; j < height; j++) {
                    for (int k = 0; k < width; k++) {
                        Pixel* pxTwo = (Pixel*)ptr;
                        if (pxOne->Equals(*pxTwo)) {
                            Pixel* pxThr = (Pixel*)((byte*)thrBits.Scan0 + i * sizeof(Pixel));
                            pxThr->Alpha = pxThr->Red = pxThr->Green = pxThr->Blue = 0xFF;
                        }
                        ptr += sizeof(Pixel);
                    }
                    ptr += padding;
                }
            });

            one.UnlockBits(oneBits);
            two.UnlockBits(twoBits);
            thr.UnlockBits(thrBits);
        }*/
        #endregion 2 способ (указатели)
		
        #region 4 способ (указатели + LockBits - массивы)
        /*
         */
        #endregion 4 способ (указатели + LockBits - массивы)

        #region 5 способ (assembler)
        /*
         */
        #endregion 5 способ (assembler)

		

    public unsafe class UnsafeBitmap
    {
        Bitmap bmp;
        int width;
        BitmapData bitmapData = null;
        byte* pBase = null;

        public UnsafeBitmap(Bitmap bmp)
        {
            this.bmp = new Bitmap(bmp);
        }

        public UnsafeBitmap(int width, int height)
        {
            this.bmp = new Bitmap(width, height);
        }

        public void Dispose()
        {
            bmp.Dispose();
        }

        public Bitmap Bitmap
        {
            get
            {
                return bmp;
            }
        }

        private Point PixelSize
        {
            get
            {
                GraphicsUnit unit = GraphicsUnit.Pixel;
                RectangleF bounds = bmp.GetBounds(ref unit);

                return new Point((int)bounds.Width, (int)bounds.Height);
            }
        }

        public void LockBitmap()
        {
            GraphicsUnit unit = GraphicsUnit.Pixel;
            RectangleF boundsF = bmp.GetBounds(ref unit);
            Rectangle bounds = new Rectangle((int)boundsF.X, (int)boundsF.Y, (int)boundsF.Width, (int)boundsF.Height);

            //width = (int)boundsF.Width * sizeof(PixelData);
        }
    }

    public class DirectBitmap : IDisposable
    {
        public Bitmap Bitmap { get; private set; }
        public Int32[] Bits { get; private set; }
        public bool Disposed { get; private set; }
        public int Width { get; private set; }
        public int Height { get; private set; }

        protected GCHandle BitsHandle { get; private set; }

        public DirectBitmap(int width, int height)
        {
            Width = width;
            Height = height;
            Bits = new int[width * height];
            BitsHandle = GCHandle.Alloc(Bits, GCHandleType.Pinned);
            Bitmap = new Bitmap(width, height, width * 4, PixelFormat.Format32bppPArgb, BitsHandle.AddrOfPinnedObject());
        }
        public DirectBitmap(Bitmap bmp)
        {

        }

        public void SetPixel(int x, int y, Color colour)
        {
            int index = x + (y * Width);
            int col = colour.ToArgb();

            Bits[index] = col;
        }

        public Color GetPixel(int x, int y)
        {
            int index = x + (y * Width);
            int col = Bits[index];
            Color result = Color.FromArgb(col);

            return result;
        }

        public Bitmap ToBmp()
        {
            return Bitmap;
        }

        public void Dispose()
        {
            if (Disposed)
                return;
            Disposed = true;
            Bitmap.Dispose();
            BitsHandle.Free();
        }
    }


	
        // пусто
        private void Save_as_Click(object sender, EventArgs e)
        {

        }
        // пусто
        private void Save_picture_Click(object sender, EventArgs e)
        {

        }
        // пусто
        private void ComboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            //if (comboBox2.SelectedIndex > -1)
            switch (comboBox2.SelectedIndex)
            {
                case 0:
                    // 0. исходное изображение
                    pictureBox1.Image = new Bitmap(files_array[0, comboBox1.SelectedIndex]);
                    Pictures_change_elements();
                    break;
                case 1:
                    // 1. густая растительность         ~ 0.70
                    break;
                case 2:
                    // 2. разражённая растительность    ~ 0.50
                    break;
                case 3:
                    // 3. открытая почва                ~ 0.25
                    break;
                case 4:
                    // 4. облака                        ~ 0.00
                    break;
                case 5:
                    // 5. снег и лёд                    ~-0.05
                    break;
                case 6:
                    // 6. вода                          ~-0.25
                    break;
                case 7:
                    // 7. искусственные материалы       ~-0.50
                    break;
            }
        }


		
        private void Test_setpixel()
        {
            if (files_array != null)
            {
                Random rnd = new Random();
                //rnd.Next(0, 20)
                Bitmap pic_rgb = new Bitmap(files_array[0, 0]);

                int wd = pic_rgb.Width,
                    hd = pic_rgb.Height,
                    end_x = wd - rect_size + 1,
                    end_y = hd - rect_size + 1;

                //Color[,] array = new Color[wd, hd];
                Bitmap res = new Bitmap(wd, hd);

                for (int j = 0; j < end_y; j++)
                {
                    for (int i = 0; i < end_x; i++)
                    {
                        res = LBSetPixel(res, LBGetPixel(pic_rgb, i, j), i, j);
                    }
                }

                pictureBox1.Image = pic_rgb;
                pictureBox2.Image = res;
                Pictures_change_elements();
            }
        }


		
            switch (iteration)
            {
                case 0:
                    for (int i = 0; i < hidden_count; i++)
                        m_first_hidden_layer[i] = Sigmoid(first_hidden_layer[i]);
                        //m_first_hidden_layer[i] = 45 * (m_first_hidden_layer[i] - 0.53);
                    iteration++;
                    break;
                case 1:
                    for (int i = 0; i < input_count; i++)
                        m_output_layer[i] = Sigmoid(output_layer[i]);
                    iteration = 0;
                    break;
            }


			
            double[] m_arr = arr;

            for (int i = 0; i < size; i++)
                m_arr[i] = Sigmoid(arr[i]);
            return m_arr;


			
        private void Change_weights_1() // ~20 мс
        {
            for (int j = 0; j < hidden_count; j++)
                for (int i = 0; i < input_count; i++)
                    weights_1[j, i] = weights_1[j, i] - input_layer[i] * weights_1_delta[j] * learning_rate;
        }

        private void Change_output_weights() // ~10 мс
        {
            for (int j = 0; j < hidden_count; j++)
                for (int i = 0; i < input_count; i++)
                    weights_o[j, i] = weights_o[j, i] - m_first_hidden_layer[j] * weights_o_delta[i] * learning_rate;
        }


		
        private void Get_w1_delta()
        {
            for (int i = 0; i < hidden_count; i++)
                weights_1_delta[i] = error[i] * m_first_hidden_layer[i] * (1 - m_first_hidden_layer[i]);
        }

        private void Get_outputw_delta()
        {
            for (int i = 0; i < input_count; i++)
                weights_o_delta[i] = error[i] * m_output_layer[i] * (1 - m_output_layer[i]);
        }



                //Get_outputw_delta();
                //Change_output_weights();
                //Get_w1_delta();
                //Change_weights_1();



        private void Fill_hidden_layer() // ~10 мс
        {
            for (int j = 0; j < hidden_count; j++)
                for (int i = 0; i < input_count; i++)
                    first_hidden_layer[j] = first_hidden_layer[j] + input_layer[i] * weights_1[j, i];
        }

        private void Fill_output_layer() // ~10 мс
        {
            for (int j = 0; j < hidden_count; j++)
                for (int i = 0; i < input_count; i++)
                    output_layer[i] = output_layer[i] + m_first_hidden_layer[j] * weights_o[j, i];
        }

		

        private void F_activ8()
        {
            switch (iteration)
            {
                case 0:
                    m_first_hidden_layer = Activation_function(first_hidden_layer, hidden_count);
                    iteration++;
                    break;
                case 1:
                    m_output_layer = Activation_function(output_layer, input_count);
                    iteration = 0;
                    break;
            }
        }


		
        private static Array ResizeArray(Array arr, int[] newSizes)
        {
            // Стандартный метод с официального сайта //
            if (newSizes.Length != arr.Rank)
                throw new ArgumentException("arr must have the same number of dimensions " +
                                            "as there are elements in newSizes", "newSizes");

            var temp = Array.CreateInstance(arr.GetType().GetElementType(), newSizes);
            int length = arr.Length <= temp.Length ? arr.Length : temp.Length;
            Array.ConstrainedCopy(arr, 0, temp, 0, length);
            return temp;
        }


		
        /*struct Pixel : IEquatable<Pixel>
        {
            public byte Blue;
            public byte Green;
            public byte Red;
            public byte Alpha;

            public bool Equals(Pixel other)
            {
                return Red == other.Red && Green == other.Green && Blue == other.Blue && Alpha == other.Alpha;
            }
        }*/

        /*struct Picturess
        {
            string[,] pics;

            string Path { get; set; }
            string Name { get; set; }
            int Num { get; set; }
            int Count { get; set; }

            void Set_count()
            {
                pics = new string[2, Count];
            }

            void Set_path(int i)
            {

            }
        }*/


		
            //byte[,,] res = new byte[3, height, width];

                /*for (int h = start_y, d = 0; h < end_y; h++, d++)
                {
                    for (int w = start_x, l = 0; w < end_x; w++, l++)
                    {
                        res[0, h, w] = (byte)arr[l, d, 0];
                        res[1, h, w] = (byte)arr[l, d, 1];
                        res[2, h, w] = (byte)arr[l, d, 2];
                    }
                }*/